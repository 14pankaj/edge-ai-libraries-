apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatqna-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chatqna-core
  template:
    metadata:
      labels:
        app: chatqna-core
    spec:
      {{ if .Values.gpu.enabled }}
      tolerations:
        - key: {{ .Values.gpu.key }}
          operator: "Equal"
          value: {{ .Values.gpu.value }}
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: {{ .Values.gpu.key }}
                  operator: In
                  values:
                    - {{ .Values.gpu.value }}
      {{ end }}
      securityContext:
        runAsUser: 0 
      containers:
        - name: chatqna-core
          image: "{{ if .Values.gpu.enabled }}{{ .Values.image.registry }}chatqna:{{ .Values.gpu.backendTag }}{{ else }}{{ .Values.image.registry }}chatqna:{{ .Values.image.backendTag }}{{ end }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          readinessProbe:
            httpGet:
              path: {{ .Values.chatqna.readinessProbe.httpGet.path }}
              port: {{ .Values.chatqna.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.chatqna.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.chatqna.readinessProbe.periodSeconds }}
          startupProbe:
            httpGet:
              path: {{ .Values.chatqna.startupProbe.httpGet.path }}
              port: {{ .Values.chatqna.startupProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.chatqna.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.chatqna.startupProbe.periodSeconds }} 
          env:
            - name: http_proxy
              value: "{{ .Values.global.http_proxy }}"
            - name: https_proxy
              value: "{{ .Values.global.https_proxy }}"
            - name: no_proxy
              value: "{{ .Values.global.no_proxy }}"
            - name: HF_ACCESS_TOKEN
              value: "{{ .Values.global.huggingface.apiToken }}"
            - name: EMBEDDING_MODEL_ID
              value: "{{ .Values.global.EMBEDDING_MODEL_NAME }}"
            - name: RERANKER_MODEL_ID
              value: "{{ .Values.global.RERANKER_MODEL }}"
            - name: LLM_MODEL_ID
              value: "{{ .Values.global.LLM_MODEL }}"
          {{ if .Values.gpu.enabled }}
            - name: EMBEDDING_DEVICE
              value: "{{ .Values.gpu.EMBEDDING_DEVICE }}"
            - name: RERANKER_DEVICE
              value: "{{ .Values.gpu.RERANKER_DEVICE }}"
            - name: LLM_DEVICE
              value: "{{ .Values.gpu.LLM_DEVICE }}"
          devices:
            - name: dri-device
              containerPath: {{ .Values.gpu.devices }}
          securityContext:
            privileged: true
            capabilities:
              add:
                - {{ .Values.gpu.group_add }}
            runAsUser: 0
            runAsGroup: 0
            fsGroup: 0
          {{ end }}
          ports:
            - containerPort: 8888
          volumeMounts:
            - name: model-cache
              mountPath: "{{ .Values.global.model_cache_path }}" 
      volumes:
        - name: model-cache
          persistentVolumeClaim:
            claimName: egai-pvc
      {{ if .Values.gpu.enabled }}
        - name: dri-device
          hostPath:
            path: {{ .Values.gpu.devices }}
            type: Directory
      {{ end }}
